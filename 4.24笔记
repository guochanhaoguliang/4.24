4.24笔记
性能优化
 垃圾回收 GC  最早是Java 

 底层语言：申请变量
 手动释放内存
 如果不释放--》内存泄漏--》内存溢出

 高级语言（js）
 	自动释放内存
 	垃圾需要释放--怎么评判是不是垃圾

 变量是有生命周期的
 作用域
 	全局变量：在哪里都能调用  生命周期非常长 直到浏览器关闭 占内存 消耗性能
 	局部变量：在函数内部调用 生命周期很短 函数调用完 不占内存 
 	重点：闭包：子函数可以调用父函数的局部变量，如果子函数得不到释放，整条作用域链上的局部变量都不会得到释放
 	例如：拖拽 
--------------------------------------------------------------------------------------------
代码的稳定性
代码的维护性
代码的性能


网络的性能
	f12 :
	network ：
	1、 neme:文件名

	2、 status：http状态码
	 	2打头的成功 304
	 	3打头的重定向
	 	4打头的是前端的问题
	 	5,6打头的是后端的问题

	3、 type：
			png
			media：媒体资源

	4、initiator 发起者

	5、 size

	6、 time
			总时间

	7、 Waterfall:
			关于性能优化都在这
			queueing: 等候的时间 
			stalled：卡的时间 浏览器响应的时间
				如果这个时间过长 客户端不行
			request send：发送的时间
				这个时间过长 ：客户端的带宽不够 或者发送的数据过大
			waiting：等待后台的响应
				这个时间过长：后台代码处理慢 或者服务器配置有问题
			content download：内容下载
				这个时间过长：服务器网络带宽不够 返回的数据过大


	ff 火狐：
	vslow
	先ctrl+shift+a 快捷下载fireBog
	基于 fireBog
	在下载yslow

	雅虎军规：34条



执行的性能
 1、少用定时器
 2、尽量少操作DOM
 3、多用变量 （声明变量尽量都写在最前面）
 4、能用正则的就不用字符串方法 正则（操作字符串  不属于js  底层语言）
 5、闭包（没用的子函数释放掉）
--------------------------------------------------------
斐波那契数列 兔子
 	自己调用自己

 	 递归 
	function fn(n){
			if(n<=2){
				return 1;
			}
			return fn(n-1)+fn(n-2)
		}

	注：本身非常快
		但是重复的计算太多了 

		var arr = [] //存重复的数据
		function fn(n){
			if(n<=2){
				return 1;
			}else{
				if(arr[n]){
					return arr[n];
				}else{
					arr[n]=fn(n-1)+fn(n-2);
					return arr[n];
				}
			}
		}
---------------------------------------------------------------------------------------
码云：个人站
	1、创建项目 地址写好点

git

有了svn为什么还要git？
	
svn	
集中式的代码管理工具
如果服务器是在内网  在家没法工作
传输慢 以文件的形式传输
代码统一容易出现问题

git：分布式代码管理工具
传输快 二进制传输方式
分支的概念

下载
	git官网
	安装 下一步
	检测成功：任意位置点击右键 会出现Git GUI here  Git Bash here
	Git GUI here ：图形化界面 (不用)
	Git Bash here：ctrl++ 放大
	linux：
		cd 进入文件夹
		ls 查看目录下的所有内容
		cd.. 上一层
		touch a.txt:新建文件
		rm.a.txt:删除文件
		clear:清屏

github 社区  所有的资源都有

1、创建